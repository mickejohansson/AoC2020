import day20, { Tile, Side } from './day20'

test('it parses tiles', () => {
  const testTile: Tile = {
    id: 2311,
    data: [
      ['.', '.', '#', '#', '.', '#', '.', '.', '#', '.'],
      ['#', '#', '.', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['#', '#', '#', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#', '.', '#', '#', '#', '.'],
      ['#', '#', '.', '.', '.', '#', '.', '#', '#', '#'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '#', '#'],
      ['.', '.', '#', '.', '.', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '.', '#', '.'],
      ['.', '.', '#', '#', '#', '.', '.', '#', '#', '#']
    ]
  }

  const tiles = day20.parseTiles(__dirname + '/testInput.txt')
  expect(tiles[0]).toMatchObject(testTile)
})

test('it rotates a tile', () => {
  const beforeRotation: Tile = {
    id: 2311,
    data: [
      ['.', '.', '#', '#', '.', '#', '.', '.', '#', '.'],
      ['#', '#', '.', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['#', '#', '#', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#', '.', '#', '#', '#', '.'],
      ['#', '#', '.', '.', '.', '#', '.', '#', '#', '#'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '#', '#'],
      ['.', '.', '#', '.', '.', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '.', '#', '.'],
      ['.', '.', '#', '#', '#', '.', '.', '#', '#', '#']
    ]
  }
  const afterRotation: Tile = {
    id: 2311,
    data: [
      ['.', '#', '.', '.', '#', '#', '#', '#', '#', '.'],
      ['.', '#', '.', '#', '#', '#', '#', '.', '#', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '#', '.', '#', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '#', '#', '.'],
      ['.', '.', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '.', '.', '.', '.'],
      ['#', '.', '#', '.', '#', '#', '.', '.', '.', '.'],
      ['#', '#', '.', '#', '#', '#', '.', '#', '.', '#'],
      ['#', '.', '.', '#', '#', '.', '#', '.', '.', '.']
    ]
  }
  const tiles = day20.parseTiles(__dirname + '/testInput.txt')
  const rotatedTile = day20.rotateCW(tiles[0])
  expect(rotatedTile).toMatchObject(afterRotation)
  expect(tiles[0]).toMatchObject(beforeRotation)
})

test('it flips a tile', () => {
  const beforeFlip: Tile = {
    id: 2311,
    data: [
      ['.', '.', '#', '#', '.', '#', '.', '.', '#', '.'],
      ['#', '#', '.', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['#', '#', '#', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#', '.', '#', '#', '#', '.'],
      ['#', '#', '.', '.', '.', '#', '.', '#', '#', '#'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '#', '#'],
      ['.', '.', '#', '.', '.', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '.', '#', '.'],
      ['.', '.', '#', '#', '#', '.', '.', '#', '#', '#']
    ]
  }
  const afterFlip: Tile = {
    id: 2311,
    data: [
      ['.', '#', '.', '.', '#', '.', '#', '#', '.', '.'],
      ['.', '.', '.', '.', '.', '#', '.', '.', '#', '#'],
      ['.', '#', '.', '.', '#', '#', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '#', '.', '#', '#', '#', '#'],
      ['.', '#', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '#', '#', '.', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '.', '.', '#', '.', '#', '.', '#', '.'],
      ['.', '.', '#', '.', '.', '.', '.', '#', '.', '.'],
      ['.', '#', '.', '#', '.', '.', '.', '#', '#', '#'],
      ['#', '#', '#', '.', '.', '#', '#', '#', '.', '.']
    ]
  }
  const tiles = day20.parseTiles(__dirname + '/testInput.txt')
  expect(tiles[0]).toMatchObject(beforeFlip)
  const flippedTile = day20.flipHorizontal(tiles[0])
  expect(flippedTile).toMatchObject(afterFlip)
  expect(tiles[0]).toMatchObject(beforeFlip)
})


test('it gets the borders of a tile', () => {
  const testTile: Tile = {
    id: 2311,
    data: [
      ['.', '.', '#', '#', '.', '#', '.', '.', '#', '.'],
      ['#', '#', '.', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['#', '#', '#', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#', '.', '#', '#', '#', '.'],
      ['#', '#', '.', '.', '.', '#', '.', '#', '#', '#'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '#', '#'],
      ['.', '.', '#', '.', '.', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '.', '#', '.'],
      ['.', '.', '#', '#', '#', '.', '.', '#', '#', '#']
    ]
  }
  const tiles = day20.parseTiles(__dirname + '/testInput.txt')
  expect(tiles[0]).toMatchObject(testTile)
  expect(day20.getBorders(tiles[0])).toMatchObject([210, 89, 231, 498])
})

test('it calculates the product of the corner ids', () => {
  expect(day20.cornerProduct(__dirname + '/testInput.txt')).toBe(20899048083289)
  expect(day20.cornerProduct(__dirname + '/input.txt')).toBe(28057939502729)
})

test('it finds the image', () => {
  const testImage = [
    '.####...#####..#...###..',
    '#####..#..#.#.####..#.#.',
    '.#.#...#.###...#.##.##..',
    '#.#.##.###.#.##.##.#####',
    '..##.###.####..#.####.##',
    '...#.#..##.##...#..#..##',
    '#.##.#..#.#..#..##.#.#..',
    '.###.##.....#...###.#...',
    '#.####.#.#....##.#..#.#.',
    '##...#..#....#..#...####',
    '..#.##...###..#.#####..#',
    '....#.##.#.#####....#...',
    '..##.##.###.....#.##..#.',
    '#...#...###..####....##.',
    '.#.##...#.##.#.#.###...#',
    '#.###.#..####...##..#...',
    '#.###...#.##...#.######.',
    '.###.###.#######..#####.',
    '..##.#..#..#.#######.###',
    '#.#..##.########..#..##.',
    '#.#####..#.#...##..#....',
    '#....##..#.#########..##',
    '#...#.....#..##...###.##',
    '#..###....##.#...##.##.#'
  ]

  const image = day20.getImage(__dirname + '/testInput.txt')
  expect(image).toMatchObject(testImage)
})

test('it finds the roughness', () => {
  const testImage = [
  '.#.#..#.##...#.##..#####',
  '###....#.#....#..#......',
  '##.##.###.#.#..######...',
  '###.#####...#.#####.#..#',
  '##.#....#.##.####...#.##',
  '...########.#....#####.#',
  '....#..#...##..#.#.###..',
  '.####...#..#.....#......',
  '#..#.##..#..###.#.##....',
  '#.####..#.####.#.#.###..',
  '###.#.#...#.######.#..##',
  '#.####....##..########.#',
  '##..##.#...#...#.#.#.#..',
  '...#..#..#.#.##..###.###',
  '.#.#....#.##.#...###.##.',
  '###.#...#..#.##.######..',
  '.#.#.###.##.##.#..#.##..',
  '.####.###.#...###.#..#.#',
  '..#.#..#..#.#.#.####.###',
  '#..####...#.#.#.###.###.',
  '#####..#####...###....##',
  '#.##..#..#...#..####...#',
  '.#.###..##..##..####.##.',
  '...###...##...#...#..###']

  expect(day20.roughness(testImage)).toBe(273)

  const image = day20.getImage(__dirname + '/input.txt')
  expect(day20.roughness(image)).toBe(2489)
})
